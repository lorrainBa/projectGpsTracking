version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: tracking_postgres
    environment:
      POSTGRES_USER: trackinguser
      POSTGRES_PASSWORD: trackingpassword
      POSTGRES_DB: trackingdb
    ports:
      - "5432:5432"
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tracking_network
    
  producer1:
    build:
      context: ./producer
      dockerfile: Dockerfile
    depends_on:
      - kafka
    networks:
      - tracking_network
    environment:
      - IP_PRODUCER=producer1

  producer2:
    build:
      context: ./producer
      dockerfile: Dockerfile
    depends_on:
      - kafka
    networks:
      - tracking_network
    environment:
      - IP_PRODUCER=producer2

  consumer:
    build:
      context: ./consumer
    depends_on:
      - postgres
    networks:
      - tracking_network

  api:
    build:
      context: ./api
    depends_on:
      - consumer
    ports:
      - "8000:8000"
    networks:
      - tracking_network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    volumes: 
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
   
  adminer:
    image: adminer
    restart: always
    ports: 
      - 8080:8080
    networks:
      - tracking_network

networks:
  tracking_network:
    driver: bridge

volumes:
  postgres_data:
  kafka_data:

